/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -p orgshadowarexinxinterface org.shadoware.xinx.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORGSHADOWAREXINXINTERFACE_H_1219396017
#define ORGSHADOWAREXINXINTERFACE_H_1219396017

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.shadoware.xinx
 */
class OrgShadowareXinxInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.shadoware.xinx"; }

public:
    OrgShadowareXinxInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgShadowareXinxInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> addFilesToVersionManager(const QStringList &list)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(list);
        return callWithArgumentList(QDBus::Block, QLatin1String("addFilesToVersionManager"), argumentList);
    }

    inline QDBusReply<void> closeAllFile()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("closeAllFile"), argumentList);
    }

    inline QDBusReply<void> closeFile()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("closeFile"), argumentList);
    }

    inline QDBusReply<void> closeProjectNoSessionData()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("closeProjectNoSessionData"), argumentList);
    }

    inline QDBusReply<void> closeProjectWithSessionData()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("closeProjectWithSessionData"), argumentList);
    }

    inline QDBusReply<void> commitToVersionManager(const QStringList &list)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(list);
        return callWithArgumentList(QDBus::Block, QLatin1String("commitToVersionManager"), argumentList);
    }

    inline QDBusReply<void> newFile(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(filename);
        return callWithArgumentList(QDBus::Block, QLatin1String("newFile"), argumentList);
    }

    inline QDBusReply<void> newProject(const QString &name, const QString &path, bool isDerivated, const QString &prefix, const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(path) << qVariantFromValue(isDerivated) << qVariantFromValue(prefix) << qVariantFromValue(filename);
        return callWithArgumentList(QDBus::Block, QLatin1String("newProject"), argumentList);
    }

    inline QDBusReply<void> newTemplate(const QString &name, const QString &category, const QString &description, const QString &text, const QStringList &arguments, const QString &key, const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(category) << qVariantFromValue(description) << qVariantFromValue(text) << qVariantFromValue(arguments) << qVariantFromValue(key) << qVariantFromValue(type);
        return callWithArgumentList(QDBus::Block, QLatin1String("newTemplate"), argumentList);
    }

    inline QDBusReply<void> openFile(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(filename);
        return callWithArgumentList(QDBus::Block, QLatin1String("openFile"), argumentList);
    }

    inline QDBusReply<void> openProject(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(filename);
        return callWithArgumentList(QDBus::Block, QLatin1String("openProject"), argumentList);
    }

    inline QDBusReply<void> removeFilesFromVersionManager(const QStringList &list)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(list);
        return callWithArgumentList(QDBus::Block, QLatin1String("removeFilesFromVersionManager"), argumentList);
    }

    inline QDBusReply<void> saveAllFile()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("saveAllFile"), argumentList);
    }

    inline QDBusReply<void> saveFileAs(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(filename);
        return callWithArgumentList(QDBus::Block, QLatin1String("saveFileAs"), argumentList);
    }

    inline QDBusReply<void> updateFromVersionManager(const QStringList &list)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(list);
        return callWithArgumentList(QDBus::Block, QLatin1String("updateFromVersionManager"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void aboutToClose();
};

namespace org {
  namespace shadoware {
    typedef ::OrgShadowareXinxInterface xinx;
  }
}
#endif
