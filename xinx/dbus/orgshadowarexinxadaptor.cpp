/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -a orgshadowarexinxadaptor org.shadoware.xinx.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "orgshadowarexinxadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class XinxAdaptor
 */

XinxAdaptor::XinxAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

XinxAdaptor::~XinxAdaptor()
{
    // destructor
}

void XinxAdaptor::addFilesToVersionManager(const QStringList &list)
{
    // handle method call org.shadoware.xinx.addFilesToVersionManager
    QMetaObject::invokeMethod(parent(), "addFilesToVersionManager", Q_ARG(QStringList, list));
}

void XinxAdaptor::closeAllFile()
{
    // handle method call org.shadoware.xinx.closeAllFile
    QMetaObject::invokeMethod(parent(), "closeAllFile");
}

void XinxAdaptor::closeFile()
{
    // handle method call org.shadoware.xinx.closeFile
    QMetaObject::invokeMethod(parent(), "closeFile");
}

void XinxAdaptor::closeProjectNoSessionData()
{
    // handle method call org.shadoware.xinx.closeProjectNoSessionData
    QMetaObject::invokeMethod(parent(), "closeProjectNoSessionData");
}

void XinxAdaptor::closeProjectWithSessionData()
{
    // handle method call org.shadoware.xinx.closeProjectWithSessionData
    QMetaObject::invokeMethod(parent(), "closeProjectWithSessionData");
}

void XinxAdaptor::commitToVersionManager(const QStringList &list)
{
    // handle method call org.shadoware.xinx.commitToVersionManager
    QMetaObject::invokeMethod(parent(), "commitToVersionManager", Q_ARG(QStringList, list));
}

void XinxAdaptor::newFile(const QString &filename)
{
    // handle method call org.shadoware.xinx.newFile
    QMetaObject::invokeMethod(parent(), "newFile", Q_ARG(QString, filename));
}

void XinxAdaptor::newProject(const QString &name, const QString &path, bool isDerivated, const QString &prefix, const QString &filename)
{
    // handle method call org.shadoware.xinx.newProject
    QMetaObject::invokeMethod(parent(), "newProject", Q_ARG(QString, name), Q_ARG(QString, path), Q_ARG(bool, isDerivated), Q_ARG(QString, prefix), Q_ARG(QString, filename));
}

void XinxAdaptor::newTemplate(const QString &name, const QString &category, const QString &description, const QString &text, const QStringList &arguments, const QString &key, const QString &type)
{
    // handle method call org.shadoware.xinx.newTemplate
    QMetaObject::invokeMethod(parent(), "newTemplate", Q_ARG(QString, name), Q_ARG(QString, category), Q_ARG(QString, description), Q_ARG(QString, text), Q_ARG(QStringList, arguments), Q_ARG(QString, key), Q_ARG(QString, type));
}

void XinxAdaptor::openFile(const QString &filename)
{
    // handle method call org.shadoware.xinx.openFile
    QMetaObject::invokeMethod(parent(), "openFile", Q_ARG(QString, filename));
}

void XinxAdaptor::openProject(const QString &filename)
{
    // handle method call org.shadoware.xinx.openProject
    QMetaObject::invokeMethod(parent(), "openProject", Q_ARG(QString, filename));
}

void XinxAdaptor::removeFilesFromVersionManager(const QStringList &list)
{
    // handle method call org.shadoware.xinx.removeFilesFromVersionManager
    QMetaObject::invokeMethod(parent(), "removeFilesFromVersionManager", Q_ARG(QStringList, list));
}

void XinxAdaptor::saveAllFile()
{
    // handle method call org.shadoware.xinx.saveAllFile
    QMetaObject::invokeMethod(parent(), "saveAllFile");
}

void XinxAdaptor::saveFileAs(const QString &filename)
{
    // handle method call org.shadoware.xinx.saveFileAs
    QMetaObject::invokeMethod(parent(), "saveFileAs", Q_ARG(QString, filename));
}

void XinxAdaptor::updateFromVersionManager(const QStringList &list)
{
    // handle method call org.shadoware.xinx.updateFromVersionManager
    QMetaObject::invokeMethod(parent(), "updateFromVersionManager", Q_ARG(QStringList, list));
}

