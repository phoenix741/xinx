// This file is auto-generated file, don't modify it unless you want to lose your code
// Generated by qgenconfig v0.1 (c) Ulrich Van Den Hekke

#include <QStringList>

#include "generixsettings.h"

/* GenerixSettingsSettings */

GenerixSettingsSettings::GenerixSettingsSettings( const QString & organization, const QString & application ) : QSettings( organization, application ) {
}

void GenerixSettingsSettings::setValue( const QString & key, const QVariant & value, const QVariant & defaultValue ) {
	if( value == defaultValue )
		remove( key );
	else
		QSettings::setValue( key, value );
}

void GenerixSettingsSettings::setValue( const QString & key, const QVariant & value ) {
	QSettings::setValue( key, value );
}

/* PrivateGenerixSettings */

class PrivateGenerixSettings {
public:
	PrivateGenerixSettings( GenerixSettings * parent );

	GenerixSettingsSettings * m_settings;
	void createSettings();
	void deleteSettings();

	GenerixSettings::struct_globals m_globals;
private:
	GenerixSettings * m_parent;
};

PrivateGenerixSettings::PrivateGenerixSettings( GenerixSettings * parent ) {
	m_parent = parent;
}

void PrivateGenerixSettings::createSettings() {
	m_settings = new GenerixSettingsSettings("Shadoware.Org", "XINX");
}

void PrivateGenerixSettings::deleteSettings() {
	if( m_settings )
		delete m_settings;
	m_settings = NULL;
}

/* GenerixSettings */

GenerixSettings::GenerixSettings( const GenerixSettings & origine ) {
	d = new PrivateGenerixSettings( this );
	d->m_globals = origine.d->m_globals;
}

GenerixSettings::GenerixSettings() {
	d = new PrivateGenerixSettings( this );
}

GenerixSettings::~GenerixSettings() {
	delete d;
}

GenerixSettings&GenerixSettings::operator=( const GenerixSettings& p ) {
	d->m_globals = p.d->m_globals;
	return *this;
}

GenerixSettings::struct_globals & GenerixSettings::config() {
	return d->m_globals;
}

void GenerixSettings::setDefault() {
	d->m_globals = getDefaultGlobals();
}

void GenerixSettings::save() {
	d->createSettings();
	setSettingsGlobals( d->m_settings, "PluginsSettings/generix", d->m_globals );
	d->deleteSettings();
}

void GenerixSettings::load() {
	d->createSettings();
	d->m_globals = getSettingsGlobals( d->m_settings, "PluginsSettings/generix", getDefaultGlobals() );
	d->deleteSettings();
}

GenerixSettings::GenerixSettings::struct_globals GenerixSettings::getDefaultGlobals() {
	struct_globals value;

	value.defaultProjectPathName = "projet";

	return value;
}

GenerixSettings::GenerixSettings::struct_globals GenerixSettings::getSettingsGlobals( GenerixSettingsSettings * settings, const QString & path, const GenerixSettings::GenerixSettings::struct_globals & defaultValue ) {
	struct_globals value;
	settings->beginGroup( path );

	value.defaultProjectPathName = settings->value( "Default Project Path Name", defaultValue.defaultProjectPathName ).toString();
	value.files = getSettingsHash_QString( settings, "Files", defaultValue.files );

	settings->endGroup();
	return value;
}

void GenerixSettings::setSettingsGlobals( GenerixSettingsSettings * settings, const QString & path, const GenerixSettings::GenerixSettings::struct_globals & value ) {
	struct_globals defaultValue = getDefaultGlobals();
	settings->beginGroup( path );

	settings->setValue( "Default Project Path Name", value.defaultProjectPathName, defaultValue.defaultProjectPathName );
	setSettingsHash_QString( settings, "Files", value.files );

	settings->endGroup();
}

QHash<QString,QString> GenerixSettings::getSettingsHash_QString( GenerixSettingsSettings * settings, const QString & path, const QHash<QString,QString> & defaultValue ) {
	QHash<QString,QString> value;
	settings->beginGroup( path );

	QStringList keys = settings->childKeys() + settings->childGroups();
	foreach( const QString & key, keys ) {
		QString def = defaultValue[ key ];
		value[ key ] = settings->value( key, def ).toString();
	}
	foreach( const QString & defaultValueKey, defaultValue.keys() ) {
		if( ! value.contains( defaultValueKey ) ) {
			value[ defaultValueKey ] = defaultValue[ defaultValueKey ];
		}
	}

	settings->endGroup();
	return value;
}

void GenerixSettings::setSettingsHash_QString( GenerixSettingsSettings * settings, const QString & path, const QHash<QString,QString> & value ) {
	settings->beginGroup( path );

	foreach( const QString & key, value.keys() ) {
		settings->setValue( key, value[ key ] );
	}

	settings->endGroup();
}

