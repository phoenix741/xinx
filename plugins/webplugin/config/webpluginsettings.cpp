// This file is auto-generated file, don't modify it unless you want to lose your code
// Generated by qgenconfig v0.1 (c) Ulrich Van Den Hekke


#include "webpluginsettings.h"

/* PrivateWebPluginSettings */

class PrivateWebPluginSettings {
public:
	PrivateWebPluginSettings( WebPluginSettings * parent );

	QSettings * m_settings;
	void createSettings();
	void deleteSettings();

	WebPluginSettings::struct_globals m_globals;
private:
	WebPluginSettings * m_parent;
};

PrivateWebPluginSettings::PrivateWebPluginSettings( WebPluginSettings * parent ) {
	m_parent = parent;
}

void PrivateWebPluginSettings::createSettings() {
	m_settings = new QSettings("Shadoware.Org", "XINX");
}

void PrivateWebPluginSettings::deleteSettings() {
	if( m_settings )
		delete m_settings;
	m_settings = NULL;
}

/* WebPluginSettings */

WebPluginSettings::WebPluginSettings( const WebPluginSettings & origine ) {
	d = new PrivateWebPluginSettings( this );
	d->m_globals = origine.d->m_globals;
}

WebPluginSettings::WebPluginSettings() {
	d = new PrivateWebPluginSettings( this );
}

WebPluginSettings::~WebPluginSettings() {
	delete d;
}

WebPluginSettings&WebPluginSettings::operator=( const WebPluginSettings& p ) {
	d->m_globals = p.d->m_globals;
	return *this;
}

WebPluginSettings::struct_globals & WebPluginSettings::config() {
	return d->m_globals;
}

void WebPluginSettings::setDefault() {
	d->m_globals = getDefaultGlobals();
}

void WebPluginSettings::save() {
	d->createSettings();
	setSettingsGlobals( d->m_settings, "plugins/webplugin", d->m_globals );
	d->deleteSettings();
}

void WebPluginSettings::load() {
	d->createSettings();
	d->m_globals = getSettingsGlobals( d->m_settings, "plugins/webplugin", getDefaultGlobals() );
	d->deleteSettings();
}

WebPluginSettings::WebPluginSettings::struct_javascript WebPluginSettings::getDefaultJavascript() {
	struct_javascript value;

	value.activeCompletion = true;

	return value;
}

WebPluginSettings::WebPluginSettings::struct_javascript WebPluginSettings::getSettingsJavascript( QSettings * settings, const QString & path, WebPluginSettings::WebPluginSettings::struct_javascript defaultValue ) {
	struct_javascript value;
	settings->beginGroup( path );

	value.activeCompletion = settings->value( "Active completion", defaultValue.activeCompletion ).toBool();

	settings->endGroup();
	return value;
}

void WebPluginSettings::setSettingsJavascript( QSettings * settings, const QString & path, WebPluginSettings::WebPluginSettings::struct_javascript value ) {
	settings->beginGroup( path );

	settings->setValue( "Active completion", value.activeCompletion );

	settings->endGroup();
}

WebPluginSettings::WebPluginSettings::struct_xml WebPluginSettings::getDefaultXml() {
	struct_xml value;

	value.activeCompletion = true;
	value.addClosedBalise = true;
	value.addDefaultAttribute = true;
	value.addDefaultSubBalise = true;

	return value;
}

WebPluginSettings::WebPluginSettings::struct_xml WebPluginSettings::getSettingsXml( QSettings * settings, const QString & path, WebPluginSettings::WebPluginSettings::struct_xml defaultValue ) {
	struct_xml value;
	settings->beginGroup( path );

	value.activeCompletion = settings->value( "Active completion", defaultValue.activeCompletion ).toBool();
	value.addClosedBalise = settings->value( "Add closed balise", defaultValue.addClosedBalise ).toBool();
	value.addDefaultAttribute = settings->value( "Add default attribute", defaultValue.addDefaultAttribute ).toBool();
	value.addDefaultSubBalise = settings->value( "Add default sub-balise", defaultValue.addDefaultSubBalise ).toBool();

	settings->endGroup();
	return value;
}

void WebPluginSettings::setSettingsXml( QSettings * settings, const QString & path, WebPluginSettings::WebPluginSettings::struct_xml value ) {
	settings->beginGroup( path );

	settings->setValue( "Active completion", value.activeCompletion );
	settings->setValue( "Add closed balise", value.addClosedBalise );
	settings->setValue( "Add default attribute", value.addDefaultAttribute );
	settings->setValue( "Add default sub-balise", value.addDefaultSubBalise );

	settings->endGroup();
}

WebPluginSettings::WebPluginSettings::struct_globals WebPluginSettings::getDefaultGlobals() {
	struct_globals value;

	value.xml = getDefaultXml();
	value.javascript = getDefaultJavascript();

	return value;
}

WebPluginSettings::WebPluginSettings::struct_globals WebPluginSettings::getSettingsGlobals( QSettings * settings, const QString & path, WebPluginSettings::WebPluginSettings::struct_globals defaultValue ) {
	struct_globals value;
	settings->beginGroup( path );

	value.xml = getSettingsXml( settings, "XML", defaultValue.xml );
	value.javascript = getSettingsJavascript( settings, "JavaScript", defaultValue.javascript );

	settings->endGroup();
	return value;
}

void WebPluginSettings::setSettingsGlobals( QSettings * settings, const QString & path, WebPluginSettings::WebPluginSettings::struct_globals value ) {
	settings->beginGroup( path );

	setSettingsXml( settings, "XML", value.xml );
	setSettingsJavascript( settings, "JavaScript", value.javascript );

	settings->endGroup();
}

