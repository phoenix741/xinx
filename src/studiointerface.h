/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -p studiointerface com.editor.xinx.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef STUDIOINTERFACE_H_1186480975
#define STUDIOINTERFACE_H_1186480975

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.editor.xinx
 */
class ComEditorXinxInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.editor.xinx"; }

public:
    ComEditorXinxInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComEditorXinxInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> closeAllFile()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("closeAllFile"), argumentList);
    }

    inline QDBusReply<void> closeProject()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("closeProject"), argumentList);
    }

    inline QDBusReply<void> newFile()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("newFile"), argumentList);
    }

    inline QDBusReply<void> openFile(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(filename);
        return callWithArgumentList(QDBus::Block, QLatin1String("openFile"), argumentList);
    }

    inline QDBusReply<void> openProject(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(filename);
        return callWithArgumentList(QDBus::Block, QLatin1String("openProject"), argumentList);
    }

    inline QDBusReply<void> saveAllFile()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("saveAllFile"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace editor {
    typedef ::ComEditorXinxInterface xinx;
  }
}
#endif
