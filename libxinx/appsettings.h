// This file is auto-generated file, don't modify it unless you want to lose your code
// Generated by qgenconfig v0.1 (c) Ulrich Van Den Hekke

#ifndef _APPSETTINGS_H_
#define _APPSETTINGS_H_

// Xinx header
#include "xinxcore.h"

// Qt header
#include <QSettings>
#include <QString>
#include <QStringList>
#include <QColor>
#include <QFont>
#include <QPoint>
#include <QSize>
#include <QByteArray>
#include <QHash>
#include <QHash>
#include <QTextCharFormat>
#include <QHash>

class PrivateAppSettings;

class  AppSettings {
public:
	struct struct_configurationEditor {
		bool activateConfigurationEditor;
		bool autoLoadConfigurationFile;
		bool autoSaveConfigurationFile;
	};

	struct struct_editor {
		bool autoindentOnSaving;
		bool popupWhenFileModified;
		bool createBackupFile;
		int completionLevel;
		int tabulationSize;
		bool showTabulationAndSpace;
		bool highlightCurrentLine;
		QFont defaultFormat;
		QColor highlightWord;
		bool autoHighlight;
		bool hideCloseTab;
		bool closeButtonOnEachTab;
	};

	struct struct_rcs {
		bool createChangelog;
	};

	struct struct_project {
		bool saveWithSessionByDefault;
		QString defaultPath;
		QStringList recentProjectFiles;
		QString defaultProjectPathName;
		bool closeVersionManagementLog;
	};

	struct struct_descriptions {
		QString datas;
	};

	struct struct_extentions {
		QString customPath;
		bool canBeSpecifique;
	};

	struct struct_xmlpres {
		QString autoExpandedPath;
		QStringList hidePath;
		bool showFilteredSubTree;
		QColor viewColor;
		QColor errorColor;
		QColor screenDataColor;
	};

	struct struct_globals {
		QString language;
		QPoint position;
		QSize size;
		bool maximized;
		QByteArray state;
		struct_descriptions descriptions;
		struct_project project;
		struct_rcs rcs;
		struct_editor editor;
		struct_configurationEditor configurationEditor;
		struct_xmlpres xmlPres;
		QHash<QString,QString> tools;
		QHash<QString,struct_extentions> files;
		QHash<QString,QTextCharFormat> formats;
	};


	AppSettings( const AppSettings & origine );
	AppSettings();
	virtual ~AppSettings();

	virtual void setDefault();
	virtual void load();
	virtual void save();

	struct_globals & config();

	AppSettings& operator=(const AppSettings& p);
protected:
	virtual struct_configurationEditor getDefaultConfigurationEditor();
	virtual AppSettings::struct_configurationEditor getSettingsConfigurationEditor( QSettings * settings, const QString & path, AppSettings::struct_configurationEditor defaultValue );
	virtual void setSettingsConfigurationEditor( QSettings * settings, const QString & path, AppSettings::struct_configurationEditor value );

	virtual struct_editor getDefaultEditor();
	virtual AppSettings::struct_editor getSettingsEditor( QSettings * settings, const QString & path, AppSettings::struct_editor defaultValue );
	virtual void setSettingsEditor( QSettings * settings, const QString & path, AppSettings::struct_editor value );

	virtual struct_rcs getDefaultRcs();
	virtual AppSettings::struct_rcs getSettingsRcs( QSettings * settings, const QString & path, AppSettings::struct_rcs defaultValue );
	virtual void setSettingsRcs( QSettings * settings, const QString & path, AppSettings::struct_rcs value );

	virtual struct_project getDefaultProject();
	virtual AppSettings::struct_project getSettingsProject( QSettings * settings, const QString & path, AppSettings::struct_project defaultValue );
	virtual void setSettingsProject( QSettings * settings, const QString & path, AppSettings::struct_project value );

	virtual struct_descriptions getDefaultDescriptions();
	virtual AppSettings::struct_descriptions getSettingsDescriptions( QSettings * settings, const QString & path, AppSettings::struct_descriptions defaultValue );
	virtual void setSettingsDescriptions( QSettings * settings, const QString & path, AppSettings::struct_descriptions value );

	virtual struct_extentions getDefaultExtentions();
	virtual AppSettings::struct_extentions getSettingsExtentions( QSettings * settings, const QString & path, AppSettings::struct_extentions defaultValue );
	virtual void setSettingsExtentions( QSettings * settings, const QString & path, AppSettings::struct_extentions value );

	virtual struct_xmlpres getDefaultXmlpres();
	virtual AppSettings::struct_xmlpres getSettingsXmlpres( QSettings * settings, const QString & path, AppSettings::struct_xmlpres defaultValue );
	virtual void setSettingsXmlpres( QSettings * settings, const QString & path, AppSettings::struct_xmlpres value );

	virtual struct_globals getDefaultGlobals();
	virtual AppSettings::struct_globals getSettingsGlobals( QSettings * settings, const QString & path, AppSettings::struct_globals defaultValue );
	virtual void setSettingsGlobals( QSettings * settings, const QString & path, AppSettings::struct_globals value );

	virtual QHash<QString,QString> getDefaultHash_QString();
	virtual QHash<QString,QString> getSettingsHash_QString( QSettings * settings, const QString & path, QHash<QString,QString> defaultValue );
	virtual void setSettingsHash_QString( QSettings * settings, const QString & path, QHash<QString,QString> value );

	virtual QHash<QString,struct_extentions> getDefaultHash_struct_extentions();
	virtual QHash<QString,AppSettings::struct_extentions> getSettingsHash_struct_extentions( QSettings * settings, const QString & path, QHash<QString,AppSettings::struct_extentions> defaultValue );
	virtual void setSettingsHash_struct_extentions( QSettings * settings, const QString & path, QHash<QString,AppSettings::struct_extentions> value );

	virtual QTextCharFormat getSettingsTextCharFormat( QSettings * settings, const QString & path, QTextCharFormat defaultValue );
	virtual void setSettingsTextCharFormat( QSettings * settings, const QString & path, QTextCharFormat value );

	virtual QHash<QString,QTextCharFormat> getDefaultHash_QTextCharFormat();
	virtual QHash<QString,QTextCharFormat> getSettingsHash_QTextCharFormat( QSettings * settings, const QString & path, QHash<QString,QTextCharFormat> defaultValue );
	virtual void setSettingsHash_QTextCharFormat( QSettings * settings, const QString & path, QHash<QString,QTextCharFormat> value );

private:
	PrivateAppSettings * d;
	friend class PrivateAppSettings;
};
#endif // _APPSETTINGS_H_

